// <auto-generated />
using EcommerceFull.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceFull.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20230817201740_att-cartModel")]
    partial class attcartModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.CartModel", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartID"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CartID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.Cart_Prod", b =>
                {
                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("CartID", "ProductID");

                    b.HasIndex("CartID")
                        .IsUnique();

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("Cart_Prods");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.CategoryModel", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.Fav_Prod", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("FavoritesID")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "FavoritesID");

                    b.HasIndex("FavoritesID")
                        .IsUnique();

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("Fav_Prods");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.FavoritesModel", b =>
                {
                    b.Property<int>("FavoritesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoritesID"));

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FavoritesID");

                    b.HasIndex("UserID");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.ProductModel", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.SoldModel", b =>
                {
                    b.Property<int>("SoldID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoldID"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SoldID");

                    b.HasIndex("UserID");

                    b.ToTable("Solds");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.Sold_Prod", b =>
                {
                    b.Property<int>("SoldID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("SoldID", "ProductID");

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.HasIndex("SoldID")
                        .IsUnique();

                    b.ToTable("Sold_Prods");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.UserModel", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.CartModel", b =>
                {
                    b.HasOne("BibliotecaXPTO_MVC.Model.UserModel", "User")
                        .WithOne("Cart")
                        .HasForeignKey("BibliotecaXPTO_MVC.Model.CartModel", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.Cart_Prod", b =>
                {
                    b.HasOne("BibliotecaXPTO_MVC.Model.CartModel", "Cart")
                        .WithOne("CP")
                        .HasForeignKey("BibliotecaXPTO_MVC.Model.Cart_Prod", "CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaXPTO_MVC.Model.ProductModel", "Product")
                        .WithOne("CP")
                        .HasForeignKey("BibliotecaXPTO_MVC.Model.Cart_Prod", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.Fav_Prod", b =>
                {
                    b.HasOne("BibliotecaXPTO_MVC.Model.FavoritesModel", "Favorite")
                        .WithOne("FP")
                        .HasForeignKey("BibliotecaXPTO_MVC.Model.Fav_Prod", "FavoritesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaXPTO_MVC.Model.ProductModel", "Product")
                        .WithOne("FP")
                        .HasForeignKey("BibliotecaXPTO_MVC.Model.Fav_Prod", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Favorite");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.FavoritesModel", b =>
                {
                    b.HasOne("BibliotecaXPTO_MVC.Model.UserModel", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.ProductModel", b =>
                {
                    b.HasOne("BibliotecaXPTO_MVC.Model.CategoryModel", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.SoldModel", b =>
                {
                    b.HasOne("BibliotecaXPTO_MVC.Model.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.Sold_Prod", b =>
                {
                    b.HasOne("BibliotecaXPTO_MVC.Model.ProductModel", "Product")
                        .WithOne("SP")
                        .HasForeignKey("BibliotecaXPTO_MVC.Model.Sold_Prod", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaXPTO_MVC.Model.SoldModel", "Sold")
                        .WithOne("SP")
                        .HasForeignKey("BibliotecaXPTO_MVC.Model.Sold_Prod", "SoldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sold");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.CartModel", b =>
                {
                    b.Navigation("CP")
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.CategoryModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.FavoritesModel", b =>
                {
                    b.Navigation("FP")
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.ProductModel", b =>
                {
                    b.Navigation("CP")
                        .IsRequired();

                    b.Navigation("FP")
                        .IsRequired();

                    b.Navigation("SP")
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.SoldModel", b =>
                {
                    b.Navigation("SP")
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaXPTO_MVC.Model.UserModel", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
